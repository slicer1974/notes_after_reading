These effect systems allow describing effects (non pure operation such as IO) as values that can be easily and safely composed into descriptions of whole programs. They also allow describing asynchrony and concurrency using Fibers, that can be thought of as lightweight (green) threads. The description is then executed (or run) by the effect system at the edge of the program (ideally in the main method).

But how do they work? Production grade effect systems are highly optimized for speed and memory efficiency, so understanding their code can be challenging. Here, for example, is the implementation of the main runtime loop in ZIO.
In this post, we’ll attempt to build a toy effect system from the ground up, to gain better understanding of how such a system might work.
Note: this post assumes some interest in FP on the part of the reader and its goal is demystifying the inner workings of popular FP libraries, not convincing you that FP is superior to other programming styles (even if we tend to think so :)).

Iteration 1: creating and combining effects

Effect systems are usually based on the concept of IO Monad, which is a construct, wrapping a zero argument function that may execute an effect and produce a value. Being a Monad allows multiple such wrapped (or suspended) effects to be composed, to describe sequential execution of the underlying effects.
Note: It is out of our scope to define and explain Monads in general, but understanding this concept is in no way a requirement for following this post.
A basic IO monad might be defined as the following trait, with the effect constructor (also commonly called pure) on the companion object, for creating actual concrete instances (no implementation shown)
```
trait IO[+A] {
  def flatMap[B](f: A => IO[B]): IO[B]
  def map[B](f: A => B): IO[B]
  // run the effect 
  def run(): A
}

object IO {
   def effect[A](a: => A): TIO[A] = ???
}
```
Using flatMap we can construct arbitrarily complex programs out of simple IO wrapped effects (here flatMap is hidden behind the syntactic sugar of our for comprehension):
```
val program = for {
   _    <- IO.effect(println("What's your name?")
   name <- IO.effect(Console.in.readLine)
   _    <- IO.effect(println(s"Hello $name!"))
} yield name

program.run()
```
Introducing TIO

Let’s define a Toy IO monad. We’ll call it TIO. It will (loosely) follow the style and API of ZIO (for simplicity we’ll omit ZIO’s typed errors and environment).
```
package tio

sealed trait TIO[+A] {
  def flatMap[B](f: A => TIO[B]): TIO[B] = TIO.FlatMap(this, f)
  def map[B](f: A => B): TIO[B] = flatMap(a => TIO.succeed(f(a)))
  // a convenience operator for sequencing effects, where the result of the
  // first effect is ignored
  def *> [B](that: TIO[B]): TIO[B] = flatMap(_ => that)
}

object TIO {
  // Initial algebra
  case class Effect[+A](a: () => A) extends TIO[A]
  // Effect combinator
  case class FlatMap[A, B](tio: TIO[A], f: A => TIO[B]) extends TIO[B]

  // Effect constructors
  def succeed[A](a: A): TIO[A] = Effect(() => a)
  def effect[A](a: => A): TIO[A] = Effect(() => a)
}
```

We represent our basic operations as case classes, so each instance of TIO is an immutable value describing the effect to run. Such descriptions are sometimes called an Algebra.

We also move the concern of running the effects into our Runtime(also called an interpreter). This allows a clean separation of describing programs as compositions of TIO s and the implementation details of running the composed programs. As Runtime becomes more complex, we'll likely want to make it configurable, or even support multiple runtimes.

So, introduce the 1 version of TIO (yet not exception handling, concurrency and stack safety):
```
package tio

import scala.util.{Failure, Success, Try}

trait Runtime {
  // Run tio and return Success/Failure
  def unsafeRunSync[A](tio: TIO[A]): Try[A]
}

object Runtime extends Runtime {
  def unsafeRunSync[A](tio: TIO[A]): Try[A] = eval(tio)

  private def eval[A](tio: TIO[A]): Try[A] = {
    tio match {
      case TIO.Effect(a) =>
        Try(a())

      case TIO.FlatMap(tio, f: (Any => TIO[Any])) =>
        eval[Any](tio) match {
          case Success(res) => eval(f(res))
          case Failure(e) => Failure(e)
        }
    }
  }
}

trait TIOApp {
  def run: TIO[Any]
  final def main(args: Array[String]): Unit = Runtime.unsafeRunSync(run).get
}
```

Now to run a TIO effect:
```
object SequenceEffects extends TIOApp {
  def run = {
    for {
      _ <- TIO.effect(println("running first effect"))
      _ <- TIO.effect(println("running second effect"))
    } yield ()
  }
}
```