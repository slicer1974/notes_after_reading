Γ обычно используется для ссылки на среду или контекст; в этом случае его можно рассматривать как набор аннотаций типов, связывающих идентификатор с его типом. 
Поэтому x : σ ∈ Γ означает, что среда Γ включает в себя тот факт, что x имеет тип σ.
⊢ можно прочитать как доказывает или определяет. Γ ⊢ x : σ означает, что среда Γ определяет, что x имеет тип σ.
Символ ⊢ по сути означает, что вы можете что-то доказать. Итак, Γ ⊢ ... - это утверждение, говорящее "Я могу доказать ... в контексте Γ". Эти утверждения также называются суждениями типа.

2.2.1 Бинарное отношение R на множестве S рефлексивно, если каждый элемент S связан отношением R с самим собой т. е. для всех s ∈ S , s R s (или (s, s) ∈ R). Отношение R симметрично, если для всех s, t ∈ S из s R t следует t R s. Отношение R транзитивно, если из s R t и t R u следует s R u. Отношение R антисимметрично, если из s R t и t R s следует s = t .
2.2.2 Рефлексивное и транзитивное отношение R на множестве S называется предпорядком (preorder) на S . (Всякий раз, когда мы говорим о «предупорядоченном множестве S », мы имеем в виду какой- то конкретный предпорядок на S .) Предпорядки обычно обозначаются символами ⩽ или ⊑. Запись s < t означает, что s ⩽ t ∧ s ̸= t («s строго меньше t »).
2.2.4 Рефлексивное, транзитивное и симметричное отноше-ние на множестве S называется отношением эквивалентности (equiva- lence relation) на S .

t ::= 				термы: 
	true 			константа «истина» 
	false 			константа «ложь» 
	if t then t else t 	условное выражение 
	0 				константа «ноль» 
	succ t 			следующее число 
	pred t 			предыдущее число 
	iszero t 			проверка на ноль.
Формат описания этой грамматики (и других грамматик в тексте этой книги) близок к стандартной форме Бэкуса - Наура. В первой строке (t ::=) определяется набор ТЕРМОВ (terms), а также объявляется, что для обозначения термов мы будем употреблять букву t. Остальные строки описывают синтаксические формы, допустимыe для термов. Всюду, где встречается символ t, можно подставить любой терм. В правой колонке - комментарии.

Для обозначения ЗНАЧЕНИЙ - возможных результатов вычислений - далее используется  буква v.

Семантика языка - то, как вычисляются термы.
Существует 3 основных подхода к формализации семантики:
1. Операционная семантика (operational semantics) специфицирует поведение языка программирования, определяя для него простую абстрактную машину (abstract machine). Машина эта «абстрактна» в том смысле, что в качестве машинного кода она использует термы языка, а не набор команд какого-то низкоуровневого микропроцессора. Для простых языков состояние (state) машины - это просто терм, а поведение ее определяется функцией перехода (transition function), которая для каждого состояния либо указывает следующее состояние, произведя шаг упрощения старого терма, либо объявляет машину остановившейся. Смыслом (meaning) терма t объявляется конечное состояние, которого машина достигает, будучи запущена с начальным состоянием t. 

2. Денотационная семантика (denotational semantics) рассматривает смысл с более абстрактной точки зрения: смыслом терма считается не последовательность машинных состояний, а некоторый математи- ческий объект, например число или функция. Построение денотационной семантики для языка состоит в нахождении некоторого набора семантических доменов (semantic domains), а также определении функции интерпретации (interpretation function), которая ставит элементы этих доменов в соответствие термам. Поиск подходящих семантических до- менов для моделирования различных языковых конструкций привел к возникновению сложной и изящной области исследований, известной как теория доменов (domain theory). Одно из важных преимуществ денотационной семантики состоит в том, что она абстрагируется от мелких деталей выполнения програм- мы и концентрирует внимание на основных понятиях языка. Кроме то- го, свойства выбранного набора семантических доменов могут исполь- зоваться для выявления важных законов поведения программ  - напри- мер, законов, утверждающих, что две программы ведут себя одинако- во или что поведение программы соответствует некоторой специфика- ции. Наконец, из свойств выбранного набора семантических доменов часто непосредственно ясно, что некоторые (желательные или нежелательные) вещи в данном языке невозможны.
 
3. Аксиоматическая семантика (axiomatic semantics) предполагает бо- лее прямой подход к этим законам: вместо того чтобы сначала опреде- лить поведение программ (с помощью операционной или денотацион- ной семантики), а затем выводить из этого определения законы, акси- оматические методы используют сами законы в качестве определения языка. Смысл терма - это то, что о нем можно доказать. Красота аксиоматических методов в том, что они концентрируют вни- мание на процессе рассуждений о программах. Именно эта традиция мышления обогатила информатику такими мощными инструментами, как инварианты (invariants).

Терм t находится в нормальной форме (normal form), если к нему не применимо никакое правило вычисления, т. е. если не существует такого t′ , что t → t′ . 
Всякое значение находится в нормальной форме.
Терм называется тупиковым (stuck), если он находится в нормальной форме, но не является значением.
->* обозначает операцию семантики с малым шагом

«λn. ...» обозначает «функция, которая для каждого n дает …»,
Синтаксис лямбда-исчисления состоит из трех видов термов1 : 
	ПЕРЕМЕННАЯ x сама по себе есть терм; 
	АБСТРАКЦИЯ переменной x в терме t1 (записывается как λx.t1 ) тоже терм; 
	ПРИМЕНЕНИЕ (АППЛИКАЦИЯ) t1 к терму t2 (записывается t1 t2 )  - третий вид термов. 
Эти способы конструирования термов выражаются следующей грамматикой: 
		t ::= 		термы: 
			x 		переменная 
			λx. t 	абстракция 
			t t 		применение
Чтобы избежать излишних скобок, для записи лямбда-термов в линейной форме мы следуем двум соглашениям. 
	Во-первых, ПРИМЕНЕНИЕ лево-ассоциативно т. е. s t u обозначает то же , что (s t) u
	Во-вторых, АБСТРАКЦИЯ ассоциативна вправо, т.е.  λx. λy. x обозначает то же, что и λx. (λy. x) 
	В-третьих, тела АБСТРАКЦИЙ простираются направо как можно дальше, так что, например, λx. x y x означает то же самое, что и λx. (x y x). Чтоюы остановить действие АБСТРАКЦИИ ее нужно заключить в скобки. 
	
Переменная x называется СВЯЗАННОЙ (bound) абстракцией λx.t., если она находится в теле t абстракции λx.t.  Если переменная не связана абстракцией она называется СВОБОДНОЙ
Терм без свободных переменных называется ЗАМКНУТЫМ (closed); замкнутые термы называют также КОМБИНАТОРАМИ (combinators). 

ПОДСТАНОВКА: t1[x→ s] обозначает подстановку s вместо СВОБОДНЫХ вхождений x в t1. 
Правила подстановки:
	x[x→ s]  		 = s 
	y[x→ s]  		 = y						если y ̸= x
	(t1 t2 )[x→ s]  = (t1[x→ s] ) (t2[x→ s] )	
	(λy.t1)[x→ s]  = λy. (t1 [x→ s])			если y ̸= x и y  /∈ F V (s) 
	(λy.t1)[x→ s]  = (λy.t1)					если y = x 	

Преобразование  (λy.t1)s  →  t1[y→ s] называется БЕТА-РЕДУКЦИЕЙ или БЕТА-ПРЕОБРАЗОВАНИЕМ.  (λy.t1)s  называется РЕДЕКСОМ.
Применение в  (λx.λy.λz.x y z)s p q всегда начинается с замены ПЕРВОЙ абстракции, т.е на первом шаге редукции будет (λy.λz.s y z)p q, далее (λz.s р z)q и конечный результат s p q.

Идея ДеБрауна - заменить именованнные переменные в термах натуральными числами так, чтобы число k означало «переменная, связанная k-й охватывающей λ». Например, обыкновенный терм λx.x соответствует безымянному терму (nameless term) λ.0, а терму λx.λy. x (y x) соответствует λ.λ. 1 (0 1). Безымянные термы иногда еще называют термами де Брауна (de Bruĳn terms), а нумерованные переменные в них называются индексами де Брауна (de Bruĳn indices).

Единственность типов: Всякий терм t имеет не более одного типа. То есть если t типизируем, то у него есть единственный тип. 
Теоремы, необходимые для безопасности системы типов:
Продвижение: Правильно типизированный терм не может быть тупиковым (либо это значение, либо он может проделать следующий шаг в соответствии с правилами вычисления).
Сохранение: Если правильно типизированный терм проделывает шаг вычисления, то получающийся терм также правильно типизирован.
В отличие от единственности типов, которая присутствует в одних системах и отсутствует в других, продвижение и сохранение останутся важнейшими требованиями для всех систем типов, которые считаются типобезопасными.
Лемма об инверсии определяет для каждой синтаксической формы, какие условия должны выполняться, чтобы терм считался правильно типизированным.