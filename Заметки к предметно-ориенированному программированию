	Предметная область состоит из пространства задач и пространства решений.

	Пространство задач - это части ПРЕДМЕТНОЙ ОБЛАСТИ, которые необ­ходимо выделить, чтобы создать новое СМЫСЛОВОЕ ЯД РО. Исследование пространства задач подразумевает изучение ПОДОБЛАСТЕЙ, которые уже существуют и которые должны существовать. Таким образом, ваше про­странство задач - это комбинация СМЫСЛОВОГО ЯД РА и ПОДОБЛАС ТЕЙ, которые это ядро должно использовать. 
	Пространство решений состоит из одного или нескольких ОГРАНИЧЕННЫХ КОНТЕКСТОВ, набора конкретных моделей программного обеспечения. Это объясняется тем, что разработанный ОГРАНИЧЕННЫЙ КОНТЕКСТ - это конкретное решение, т.е. представление реализации. ОГРАНИЧЕННЫЙ КОНТЕКСТ используется для реализации решения в виде программного обеспечения.
	ОГРАНИЧЕННЫЙ КОНТЕКСТ - это явная граница, внутри которой существует мо­дель предметной области. Внутри этой границы все термины и фразы ЕДИНОГО ЯЗЫКА имеют специфическое значение, а модель точно отражает ЯЗЫК. Например: в ПРЕДМЕТНОЙ ОБЛАСТИ контекста сотрудничества эксперты не описывают людей, которые используют средства сотрудничества, как пользователей с полномочиями. Скорее они говорят об этих сотрудниках с точки зрения ролей, которые они играют в КОНТЕКСТЕ - авторы, владельцы, участни­ки и модераторы. Если вы видите одни и те же объекты во многих контекстах, это, вероятно, означает, что сделана определенная ошибка мо­делирования, за исключением ситуаций, когда два ОГРАНИЧЕННЫХ КОНТЕКСТА используют ОБЩЕЕ ЯДРО (SНARED КERNEL).

	В ходе анализа нужно извлечь из предметной области ее фундаментальные понятия и представить их понятным и выразительным образом. А в ходе проектирования архитектуры следует задать набор компонентов в выбранной среде программирования, эффективно и правильно решающих задачи. Модель, таким образом, должна отражать идеи предметной области и, одновременно, собюдать принципы проектирования ПО. Чтобы плотно привязать программную реализацию к модели, обычно требуются средства разработки и языки программирования, поддерживающие парадигму моделирования - например, объектно-ориентированное программирование.

	Разбейте сложную программу на уровни. Виды уровней: интерфейс пользователя, операционный, предметной области, инфраструктурный. Внутри каждого уровня разработайте связную структуру, полагающуюся только на нижние уровни и зависящую только от них. Чтобы обеспечить связь с верхними уровнями, используйте стандартные архитектурные шаблоны. Сосредоточьте весь код, относящийся к предметной области, в одном уровне, и изолируйте его от кода интерфейса пользователя, прикладных операций и инфраструктуры. 

	Если объект определяется уникальным индивидуальным существованием, а не набором атрибутов, это свойство следует считать главным при определении объекта в модели.Такой объект будет ОБЪЕКТОМ-СУЩНОСТЬЮ. Задайте операцию, которая бы обязательно давала неповторимый результат для каждого такого объекта, - возможно для этого с объектом придется ассоциировать некий символ с гарантированной уникальностью. Такое средство идентификации может быть внешним либо внутренним по отношению к системе. Однако такое средство должно соответствовать правилам различения объектов в модели. Именно уникальный идентификатор и характеристики изменчи­вости отличают СУЩНОСТИ от ОБЪЕКТОВ-ЗНАЧЕНИЙ (VALUE OBJECTS) .
 	В модели должно даваться ТОЧНОЕ определение, что такое ОДИНАКОВЫЕ ОБЪЕКТЫ.

	Если элемент модели полностью определяется своими атрибутами, то его следует считать ОБЪЕКТОМ-ЗНАЧЕНИЕМ. Это объекты, которые используются для описаний предметов и явлений. Они не имеют собственной уникальной идентичности, значимой для модели. Достаточно знать, ЧТО они из себя представляют, а не ЧЕМ ИМЕННО они являются.
	При моделировании по возможности следует ис­пользовать ОБЪЕКТЫ -ЗНАЧЕНИЯ, а не СУЩНОСТИ !!!
	Решая, является ли понятие ЗНАЧ ЕНИЕМ, следует выяснить, обладает ли оно большинством из следующих характеристик. 
		• Оно измеряет, оценивает или описывает объект предметной области. 
		• Его можно считать неизменяемым. 
		• Оно моделирует нечто концептуально целостное, объединяя связанные атрибуты в одно целое. 
		• При изменении способа измерения или описания его можно полностью за­ менить. 
		• Его можно сравнивать с другими объектами с помощью отношения равенства ЗНАЧЕНИЙ. 
		• Оно предоставляет связанным с ним объектам ФУНКЦИЮ БЕЗ ПОБОЧНЫХ ЭФФЕКТОВ [Эванс] .
	Истинный ОБЪЕКТ - ЗНАЧЕНИЕ в модели - это не элемент предметной обла­сти. На самом деле это понятие, которое измеряет, определяет количество или как-то иначе описывает элемент предметной области. 
	Объект, являющийся ЗНАЧЕНИЕМ, после создания остается неизменным.
	Иногда объект нецелесообразно делать неизменяемым. Это очень хорошо и сви­детельствует о том, что объект следует моделировать как СУЩНОС Т Ь . 
	
	Объекты-значения имеют тенденцию множиться. В этом случае можно применить шаблон Приспособленец.

	Некоторые понятия модели нестественны в роли объектов. Если принудительно реализовать нужные функции модели в ОБЪЕКТЕ-СУЩНОСТИ или ОБЪЕКТЕ-ЗНАЧЕНИИ, это либо исказит определение объекта из модели, либо добавит в модель лишних, искусственно сконструированных объектов. Если существенно важный процесс или преобразование в модели не относятся к естественным обязанностям ОБЪЕКТА-СУЩНОСТИ или ОБЪЕКТА-ЗНАЧЕНИЯ, добавьте в модель эту операцию с отдельным интерфейсом и назовите ее СЛУЖБОЙ. Определите интерфейс на языке модели и сделайте имя операции элементом ЕДИНОГО ЯЗЫКА. У СЛУЖБЫ не должно быть собственного состояния. Интерфейс СЛУЖБЫ определен через другие элементы модели предметной области.
	Нужно четко определять, к какому уровню относятся службы - предметной области, инфраструктурному или операционному.

-----------------------------------------------------------------
	При проектировании с большим количеством ссылок на объекты возникают сложности при оперировании сущностями. В этом случае поможет проектирование с помощью АГРЕГАТОВ, ФАБРИК и ХРАНИЛИЩ.
	Агрегат - совокупность взаимосвязанных объектов, которые мы воспринимаем как единое целое с точки зрения изменения данных. У каждого Агрегата есть корневой объект и есть граница. Корневой объект - это один конкретный объект-Сущность, содержащийся в Агрегате. В границы Агрегата включаются связанные с ним объекты-Значения и объекты-Сущности.
 	Граница агрегата определяется для каждого включенного в Агрегат объекта-Сущности на основании факта, является ли включенный в агрегат некорневой объект самостоятельной сущностью предметной области (например, существуют запросы, которые опираются на некорневой объект как на основной). В этом случае некорневой объект необходимо выделить как корневой объект отдельного Агрегата.
 	Корневой объект - единственный член Агрегата, на который могут ссылаться внешние объекты, в то время как объекты, заключенные внутри границы, могут ссылаться друг на друга. Только корневые объекты Агрегатов можно непосредственно получать по запросам из базы данных. Все остальные объекты разрешается извлекать только по цепочке связей. При любом изменении состояния нужно требовать удовлетворения всех инвариантов для объектов в Агрегате и для всего Агрегата в целом. 
	Фабрика - объект, для создания сложных Агрегатов.
	Хранилище - объект, реализующий поиск Агрегатов по атрибутам. Реализуйте методы, которые будут выбирать объекты по заданным критериям и возвращать полностью сгенерированные и инициализированные объекты или коллекции объектов с атрибутами, подходящими под критерии, таким образом инкапсулируя реальные технологии хранения данных и выполнения запросов. Ключевыми объектами Хранилищ являются корневые объекты Агрегатов.

 	В процессе разработки полезных моделей необходимо понять три истины:
1. Создание сложных, хорошо проработанных моделей предметных областей возможно, и они стоят затраченного на них труда.
2. Практически не существует другого способа построить такую модель, кроме итерационного процесса рефакторинга с тесным взаимодействием между специалистами предметной области и программистами, желающими узнать о ней больше.
3. Реализация и успешное использование таких моделей могут потребовать высокой квалификации в области проектирования и моделирования.

	Слушайте язык на котором говорят специалисты предметной области. Есть ли у них термины, которые кратко выражают нечто сложное? Поправляют или они Вас? Исчезает ли у них с лиц выражение озадаченности, когда вы употребляете какую-то конкретную фразу? Все это - намеки на существование понятия, которое может оказаться полезным для модели. Когда пользователи программы или специалисты в предметной области пользуются лексиконом, которого нет в модели - это тревожный знак. А еще более тревожный - когда термины, отсутствующие в модели, употребляют как разработчики, так и специалисты. 

	Шаблон Спецификация нужен для включения в предметную область правил прикладной модели. Спецификация - это предикат, который определяет,удовлетворяет ли объект некоторым критериям. Применение спецификаций: 
1. Проверить пригодность объекта для удовлетворения какой-то потребности или достижения какой-то цели
2. Выбрать объект по какому-то критерию из коллекции ему подобных
3. Заказать создание нового объекта для определенных потребностей

	Давайте такие имена классам и операциям, чтобы они описывали их назначение и получаемый результат, но не способ выполнения ими своих функций. Если раскрывается внутрений механизм работы - теряется смысл инкапсуляции.

	Контролируйте побочные эффекты функций, вынося сложные вычисления в Объекты-Значения, если для таких операций имеются соответствующие концептуальные понятия.

	Если побочные эффекты операций определены в их реализации только неявно, то в архитектурах с интенсивной передачей управления возникает сложное переплетение причин и следствий. Единственным способом понять программу становится трассировка ее выполнения по всем возможным ветвям. При этом теряется смысл инкапсуляции, а необходимсть в трассировке выполнения делает бессмысленным также и абстрагирование.

	Разбивайте элементы архитектуры (операции,интерфейсы, классы и АГРЕГАТЫ) на связные единицы, учитывая свое интуитивное понимание смысловых границ предметной области. Наблюдайте за направлениями изменений и осями стабильности в ходе последовательного рефакторинга, ищите КОНЦЕПТУАЛЬНЫЕ КОНТУРЫ, по которым происходит расслоение между ними. Прежде всего согласуйте модель с теми логически последовательными и стройными аспектами предметной области, которые делают даннуы область жизнеспособной, пркатически ценной.

	Полная унификация модели предметной области для большой системы либо невозможна, либо неоправданно затратна.
Контекст модели - это некий набор условий, которые должны выполняться, чтобы можно утверждать, что термины модели имеют четкий смысл.
Определите все модели, используемые в проекте, и задайте для каждой свой Ограниченный Контекст. Опишите точки соприкосновения между моделями.

	Части модели, которые можно четко выделить для выполнения главной задачи приложения, образуют ее СМЫСЛОВОЕ ЯДРО. Смысловое ядро содержит четко, рельефно выделенные самые ценные и специализированные понятия. Ядро должно быть небольшим по размеру.

	НЕСПЕЦИАЛИЗИРОВАННЫЕ МОДЕЛИ (модели, содержащие знания косвенно связанные с предметной областью - например функции работы с часовыми поясами, денежными единицами итд) нужно отделять от ядра. Внесение в такие модели специализированных элементов  - плохая идея, уменьшается расширяемость. Кроме того специализированные понятия/концепции предпочтительнее размещать в СМЫСЛОВОЕ ЯДРО или в свои специализированные области. 


Выполняя стратегическое планирование в проекте, начните с четкой оценки текущей ситуации:
1. Начертите КАРТУ КОНТЕКСТОВ. Можно ли сделать это естественным образом или есть препятствие в виде неоднозначности?
2. Обратите внимание на использование языка в проекте. Существует ли в нем ЕДИНЫЙ ЯЗЫК? Достаточно ли он богат, чтобы помочь в процессе разработки?
3. Определите самое важное. Обозначено ли в проекте СМЫСЛОВОЕ ЯДРО? Написано ли введение в ПРЕДМЕТНУЮ ОБЛАСТЬ? А Вы можете его написать?
4. Помогает или мешает технология реализации проекта в ПРОЕКТИРОВАНИИ ПО МОДЕЛИ?
5. Обладают ли разработчики достаточными техническими навыками?
6. Хорошо ли разработчики знают саму предметную область? Вызывает ли она у них интерес?
