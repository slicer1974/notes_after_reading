Разбейте сложную программу на уровни. Внутри каждого уровня разработайте связную структуру, полагающуюся только на нижние уровни и зависящую только от них. Чтобы обеспечить связь с верхними уровнями, используйте стандартные архитектурные шаблоны. Сосредоточьте весь код, относящийся к предметной области, в одном уровне, и изолируйте его от кода интерфейса пользователя, прикладных операций и инфраструктуры. 

Если объект определяется уникальным индивидуальным существованием, а не набором атрибутов, это свойство следует считать главным при определении объекта в модели.Такой объект будет ОБЪЕТОМ-СУЩНОСТЬЮ. Задайте операцию, которая бы обязательно давала неповторимый результат для каждого такого объекта, - возможно для этого с объектом придется ассоциировать некий символ с гарантированной уникальностью. Такое средство идентификации может быть внешним либо внутренним по отношению к системе. Однако такое средство должно соответствовать правилам различения объектов вмодели. В модели должно даваться точное определение, что такое одинаковые объекты.

Если элемент модели полностью определяется своими атрибутами, то его следует считать ОБЪЕКТОМ-ЗНАЧЕНИЕМ. Это объекты, которые используются для описаний предметов и явлений. Они не имеют собственной уникальной идентичности, значимой для модели.

Объекты-значения имеют тенденцию множиться. В этом случае можно применить шаблон Приспособленец.

Некоторые понятия модели нестественны в роли объектов. Если принудительно реализовать нужные функции модели в ОБЪЕКТЕ-СУЩНОСТИ или ОБЪЕКТЕ-ЗНАЧЕНИИ, это либо исказит определение объекта из модели, либо добавит в модель лишних, искусственно сконструированных объектов. Если существенно важный процесс или преобразование в модели не относятся к естественным обязанностям ОБЪЕКТА-СУЩНОСТИ или ОБЪЕКТА-ЗНАЧЕНИЯ, добавьте в модель эту операцию с отдельным интерфейсом и назовите ее СЛУЖБОЙ. Определите интерфейс на языке модели и сделайте имя операции элементом ЕДИНОГО ЯЗЫКА. У СЛУЖБЫ не должно быть собственного состояния. Интерфейс СЛУЖБЫ определен через другие элементы модели предметной области.

При проектировании с большим количеством ссылок на объекты возникают сложности при оперировании сущностями. В этом случае поможет проектирование с помощью АГРЕГАТОВ, ФАБРИК и ХРАНИЛИЩ.
	Агрегат - совокупность взаимосвязанных объектов, которые мы воспринимаем как единое целое с точки зрения изменения данных. У каждого Агрегата есть корневой объект и есть граница. Корневой объект - это один конкретный объект-Сущность, содержащийся в Агрегате. В границы Агрегата включаются связанные с ним объекты-Значения и объекты-Сущности.
  Граница агрегата определяется для каждого включенного в Агрегат объекта-Сущности на основании факта, является ли включенный в агрегат некорневой объект самостоятельной сущностью предметной области (например, существуют запросы, которые опираются на некорневой объект как на основной). В этом случае некорневой объект необходимо выделить как корневой объект отдельного Агрегата.
  Корневой объект - единственный член Агрегата, на который могут ссылаться внешние объекты, в то время как объекты, заключенные внутри границы, могут ссылаться друг на друга. Только корневые объекты Агрегатов можно непосредственно получать по запросам из базы данных. Все остальные объекты разрешается извлекать только по цепочке связей. При любом изменении состояния нужно требовать удовлетворения всех инвариантов для объектов в Агрегате и для всего Агрегата в целом. 
	Фабрика - объект, для создания сложных Агрегатов.
	Хранилище - объект, реализующий поиск Агрегатов по атрибутам. Реализуйте методы, которые будут выбирать объекты по заданным критериям и возвращать полностью сгенерированные и инициализированные объекты или коллекции объектов с атрибутами, подходящими под критерии, таким образом инкапсулируя реальные технологии хранения данных и выполнения запросов. Ключевыми объектами Хранилищ являются корневые объекты Агрегатов.
