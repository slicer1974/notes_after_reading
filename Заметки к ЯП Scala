В Scala каждый __вспомогательный конструктор__ в качестве первого действия __должен вызывать еще один конструктор того же класса__. Иными словами, первой инструкции в каждом вспомогательном конструкторе каждого класса Scala следует иметь вид this(...). Вызываемым должен быть либо первичный конструктор (как в примере с классом Rational), либо другой вспомогательный конструктор, который появляет­ся в тексте программы перед вызывающим его конструктором. Конечный __результат__ применения данного правила заключается в том, что __каждый__ вызов конструктора в Scala __должен в конце концов завершаться вызовом первичного конструктора класса__. Первичный конструктор, таким образом, — __единственная__ точка входа в класс.

#Все четыре формы составления идентификаторов в Scala:

__Буквенно-цифровые идентификаторы__ начинаются с буквы или знака подчерки­ вания, за которыми могут следовать другие буквы, цифры или знаки подчеркива­ ния. Символ $ также считается буквой, но зарезервирован для идентификаторов, создаваемых компилятором Scala. Идентификаторы в пользовательских програм­ мах не должны содержать символы $, несмотря на возможность успешно пройти компиляцию: если это произойдет, то могут возникнуть конфликты имен с теми идентификаторами, которые будут созданы компилятором Scala. __Следует избегать подчеркивания__. Используется __смешанный регистр__.
`Имена полей, параметры методов, имена локальных переменных и имена функций в смешанном регистре должны начинаться с буквы в нижнем регистре`, например: length, flatMap и s. 
`Имена классов, трейтов и констант в смешанном регистре должны начинаться с буквы в верхнем регистре`, 
например: BigInt, List и UnbalancedTreeMap2.

__Идентификатор оператора__ состоит из одного или нескольких символов опе­раторов. Таковыми являются выводимые на печать ASCII-символы, такие как +, :, ?, ~ или #1. Примеры идентификаторов операторов: 
+ ++ ::: <?> :–> 
Компилятор Scala на внутреннем уровне перерабатывает идентификаторы операторов, чтобы превратить их в допустимые Java-идентификаторы со встро­енными символами $ . Например, идентификатор :-> будет представлен как $colon$minus$greater.

__Смешанный идентификатор__ состоит из буквенно-цифрового идентификато­ра, за которым стоят знак подчеркивания и идентификатор оператора. Напри­мер, unary_+, использованный как имя метода, определяет унарный оператор +. А myvar_=, использованный как имя метода, определяет оператор присваивания.

__Литеральный идентификатор__ представляет собой произвольную строку, за­ ключенную в обратные кавычки (`...`). Примеры литеральных идентификаторов выглядят следующим образом: 
`x` `<clinit>` `yield` 
Замысел состоит в том, что между обратными кавычками можно поместить лю­ бую строку, которую среда выполнения станет воспринимать в качестве идентифи­ катора. В результате всегда будет получаться идентификатор Scala. Это сработает даже в том случае, если имя, заключенное в обратные кавычки, является в Scala зарезервированным словом. Обычно такие идентификаторы используются при обращении к статическому методу yield в Java-классе Thread. Вы не можете прибег­