1.  Файлы данных (иногда называемые первичными файлами) могут быть реализованы в виде 
	* индексированной таблицы (index-organized table, IOT), 
	* таблицы-кучи (файла- кучи) или 
	* хэшированной таблицы (хэшированного файла).
2. Записи в файлах-кучах не организованы согласно какому-либо определенному порядку и в большинстве случаев размещаются в порядке записи. Таким образом, при добавлении новых страниц не требуется никаких дополнительных действий или реорганизации файлов. Файлы-кучи требуют использования дополнительных индексных структур, указывающих на места хранения записей данных, чтобы можно было производить их поиск. В хэшированных файлах записи хранятся в сегментах, а хэш-значение ключа опре- деляет, к какому сегменту относится запись. Записи в сегменте могут храниться в порядке добавления или сортироваться по ключам для повышения скорости поиска. В индексированных таблицах (IOT) данные хранятся в самом индексе. Поскольку записи отсортированы по ключу, сканирование диапазона в IOT можно реализовать путем последовательного сканирования содержимого.
3. Если порядок записей данных соответствует порядку ключей поиска, такой индекс называется **кластеризованным**. Записи данных в случае кластеризации обычно хранятся в том же файле или в кластеризованном файле в соответствии с порядком ключей. Если данные хранятся в отдельном файле и их порядок не соответствует порядку ключей, индекс называется **некластеризованным** (или некластерным).
_Индексированные таблицы хранят информацию в порядке индекса и являются кластеризованными по определению._

Структуры хранения имеют три общие переменные: они __используют буферизацию (или избегают ее использование)__, __неизменяемые (или изменяемые) файлы__ и __хранят значения в упорядоченном (или неупорядоченном) виде__. Большинство из тех различий и оптимизаций в структурах хранения, которые мы рассмотрим в этой книге, связаны с одним из этих трех понятий.

__B-дерево__ является идеально сбалансированным, то есть глубина всех его листьев одинакова. B-дерево имеет следующие свойства (t — параметр дерева, называемый минимальной степенью B-дерева, не меньший 2) (если дерево не пустое) :
1. Каждый узел (включая корень) содержит не менее t−1 ключей, и имеет по меньшей мере t дочерних узлов (при высоте большей 0) 
2. Каждый узел (включая корень) содержит не более 2t−1 ключей, и не более чем 2t дочерних узлов (при высоте большей 0)
3. Каждый узел дерева, кроме листьев, содержащий ключи k1,...,kn, имеет n+1 дочерний узел. i-й дочерний узел содержит ключи из отрезка __[ki−1;ki],k0=−∞,kn+1=∞__
4. Ключи в каждом узле упорядочены по неубыванию.
5. Все листья находятся на одном уровне.

__B⁺-деревья__ хранят значения только в листовых узлах. Внутренние узлы хранят только ключи-разделители, используемые для направления алгоритма поиска к соответствующему значению, хранящемуся на листовом уровне. Поскольку значения в B⁺-деревьях хранятся только на листовом уровне, все операции (вставка, обновление, удаление и извлечение записей данных) затрагивают только листовые узлы, а более высокие уровни затрагиваются только во время разделения и слияния.
Ключи, хранящиеся в узлах B⁺-дерева, называют __элементами индекса, ключами-раз- делителями или ячейками-разделителями__. Они разделяют дерево на поддеревья (также называемые __ветвями или поддиапазонами__), содержащие соответствующие диапазоны ключей. Ключи хранятся в отсортированном порядке, с тем чтобы было возможно выполнение двоичного поиска. Поддерево находят путем нахождения ключа и следования по соответствующим указателям с верхнего уровня на нижний. Первый указатель в узле указывает на поддерево, ключи в котором меньше первого ключа, а последний указатель в узле указывает на поддерево, ключи в котором больше последнего ключа или равны ему. Каждый из других указывает на поддерево, ключи в котором находятся в диапазоне между двумя ключами: Ki-1 ≤ Ks < Ki.
Cложность __поиска__ по B⁺-дереву обычно оценивается как log M. 
